function y = fcn(error)

persistent previous_error;                  %previous error = current error for next iteration, initially set to 0;
persistent Ki_output;                        %need as persistent variable for Ki_output = Ki_output + (...)
persistent ept;                             %constant vector of exponentials (p*e^(-p*n*Ts)) where n = 1.....#of samples we want to average
persistent unweighted_differential_outputs;  %vector used for dot product with ept, shifted at each cycle. 

if isempty(previous_error)
    previous_error = 0;
end

%Trial values for testing against Built in PID block
Kp = 7.3697;
Ki = 24.525;
Kd = 0.04744;

Ts = 0.0001;    %Controller frequency from Arduino assumed to be 10kHz.

%--------P controller part------------------
Kp_output = Kp*error;    

%---------I controller part-----------------

%Initializing Ki_output
if isempty(Ki_output)
    Ki_output = 0;
end

Ki_output = Ki_output + Ki*[(error + previous_error)/2]*Ts; %cumulative areas of trapeziums

%----------D controller part----------------
controlfreq = 10000; %Hz
filter_pole = 5000;  %big pole because we don't care much about averaging but we do care a lot about delay. (signal is not noisy)
n = 4*controlfreq/filter_pole;  %We are averaging 80 samples in this example


%Now, we initialize the ept vector (will remain constant valued throughout the program)
if isempty(ept)
    ept = zeros(1,n);
    for i = 1:n
        ept(i) = filter_pole*1.132*exp(-filter_pole*i*Ts);
    end
    %We want Ts*sum(ept) = 1 but this is not the case normally, so we have to scale the ept such that we get a sum
    %of 1. To account for discretization error, we scale it by multiplying it by 1.132 in this example. 
end

if isempty(unweighted_differential_outputs)
    unweighted_differential_outputs = zeros(1,n);
end 

unweighted_differential_outputs(1) = (error - previous_error); 
filtered_derivative = dot(ept,unweighted_differential_outputs);

Kd_output = Kd*filtered_derivative;

n2 = n+1; %n2 = 9
for count = 1:(n-1) %1:7 in this example
    unweighted_differential_outputs(n2-count) = unweighted_differential_outputs(n2 - count - 1);    %shift values by one index, and in next loop calculate one more new slope at index 1 (starting index)
end 

y = Kp_output + Ki_output + Kd_output;

previous_error = error; %this will help us move on to get new values for Ki and Kd

end